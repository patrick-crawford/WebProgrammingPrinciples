"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[1615],{7841:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/files/exercise-5bb4abd92035ef72375208113096357b.js"},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var s=r(6540);const i={},c=s.createContext(i);function o(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(c.Provider,{value:n},e.children)}},8567:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Objects-Built-ins/Practice-Exercises","title":"Practice Exercises","description":"Practice Exercises","source":"@site/docs/Objects-Built-ins/Practice-Exercises.md","sourceDirName":"Objects-Built-ins","slug":"/Objects-Built-ins/Practice-Exercises","permalink":"/WebProgrammingPrinciples/Objects-Built-ins/Practice-Exercises","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Objects-Built-ins/Practice-Exercises.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"Practice-Exercises","title":"Practice Exercises","sidebar_position":5,"description":"Practice Exercises"},"sidebar":"courseNotesSidebar","previous":{"title":"RegExp","permalink":"/WebProgrammingPrinciples/Objects-Built-ins/RegExp"},"next":{"title":"Objects in JavaScript","permalink":"/WebProgrammingPrinciples/Advanced-Objects-Inheritance/Objects-JavaScript"}}');var i=r(4848),c=r(8453);const o={id:"Practice-Exercises",title:"Practice Exercises",sidebar_position:5,description:"Practice Exercises"},d="Practice Exercises",t={},a=[{value:"A Larger Problem Combining Everything:",id:"a-larger-problem-combining-everything",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"practice-exercises",children:"Practice Exercises"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function ",(0,i.jsx)(n.code,{children:"log"})," that takes an ",(0,i.jsx)(n.code,{children:"Array"})," of ",(0,i.jsx)(n.code,{children:"String"}),"s and displays them on the ",(0,i.jsx)(n.code,{children:"console"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["An application uses an ",(0,i.jsx)(n.code,{children:"Array"})," as a Stack (LIFO) to keep track of items in a user's shopping history. Every time they browse to an item, you want to ",(0,i.jsx)(n.code,{children:"addItemToHistory(item)"}),". How would you implement this?"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function ",(0,i.jsx)(n.code,{children:"buildArray"})," that takes two ",(0,i.jsx)(n.code,{children:"Number"}),"s, and returns an ",(0,i.jsx)(n.code,{children:"Array"})," filled with all numbers between the given number: ",(0,i.jsx)(n.code,{children:"buildArray(5, 10)"})," should return ",(0,i.jsx)(n.code,{children:"[5, 6, 7, 8, 9, 10]"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function ",(0,i.jsx)(n.code,{children:"addDollars"})," that takes an ",(0,i.jsx)(n.code,{children:"Array"})," of ",(0,i.jsx)(n.code,{children:"Number"}),"s and uses the array's ",(0,i.jsx)(n.code,{children:"map()"})," method to create and return a new ",(0,i.jsx)(n.code,{children:"Array"})," with each element having a ",(0,i.jsx)(n.code,{children:"$"})," added to the front: ",(0,i.jsx)(n.code,{children:"addDollars([1, 2, 3, 4])"})," should return ",(0,i.jsx)(n.code,{children:"['$1', '$2', '$3', '$4']"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function ",(0,i.jsx)(n.code,{children:"tidy"})," that takes an ",(0,i.jsx)(n.code,{children:"Array"})," of ",(0,i.jsx)(n.code,{children:"String"}),"s and uses the array's ",(0,i.jsx)(n.code,{children:"map()"})," method to create and return a new ",(0,i.jsx)(n.code,{children:"Array"})," with each element having all leading/trailing whitespace removed: ",(0,i.jsx)(n.code,{children:"tidy([' hello', ' world '])"})," should return ",(0,i.jsx)(n.code,{children:"['hello', 'world']"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function ",(0,i.jsx)(n.code,{children:"measure"})," which takes an ",(0,i.jsx)(n.code,{children:"Array"})," of ",(0,i.jsx)(n.code,{children:"String"}),"s and uses the array's ",(0,i.jsx)(n.code,{children:"forEach()"})," method to determine the size of each string in the array, returning the total: ",(0,i.jsx)(n.code,{children:"measure(['a', 'bc'])"})," should return ",(0,i.jsx)(n.code,{children:"3"}),". Bonus: try to rewrite your code using the ",(0,i.jsx)(n.code,{children:"Array"}),"'s ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce",children:(0,i.jsx)(n.code,{children:"reduce()"})})," method."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function ",(0,i.jsx)(n.code,{children:"whereIsWaldo"})," that takes an ",(0,i.jsx)(n.code,{children:"Array"})," of ",(0,i.jsx)(n.code,{children:"String"}),"s and uses the array's ",(0,i.jsx)(n.code,{children:"forEach()"})," method to create a new ",(0,i.jsx)(n.code,{children:"Array"})," with only the elements that contain the text ",(0,i.jsx)(n.code,{children:'"waldo"'})," or ",(0,i.jsx)(n.code,{children:'"Waldo'}),'" somewhere in them: ',(0,i.jsx)(n.code,{children:"whereIsWaldo(['Jim Waldorf, 'Lynn Waldon', 'Frank Smith'])"})," should return ",(0,i.jsx)(n.code,{children:"'Jim Waldorf, 'Lynn Waldon']"}),". Bonus: try to rewrite your code using the ",(0,i.jsx)(n.code,{children:"Array"}),"'s ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",children:(0,i.jsx)(n.code,{children:"filter()"})})," method."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function ",(0,i.jsx)(n.code,{children:"checkAges"})," that takes two arguments: an ",(0,i.jsx)(n.code,{children:"Array"})," of ages (",(0,i.jsx)(n.code,{children:"Number"}),"); and a cut-off age (",(0,i.jsx)(n.code,{children:"Number"}),"). Your function should return ",(0,i.jsx)(n.code,{children:"true"})," if all of the ages in the ",(0,i.jsx)(n.code,{children:"Array"})," are at least as old as the cut-off age: ",(0,i.jsx)(n.code,{children:"checkAges([16, 18, 22, 32, 56], 19)"})," should return ",(0,i.jsx)(n.code,{children:"false"})," and ",(0,i.jsx)(n.code,{children:"checkAges([16, 18, 22, 32, 56], 6)"})," should return ",(0,i.jsx)(n.code,{children:"true"}),". Bonus: try to rewrite your code using the ",(0,i.jsx)(n.code,{children:"Array"}),"'s ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every",children:(0,i.jsx)(n.code,{children:"every()"})})," method."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function ",(0,i.jsx)(n.code,{children:"containsBadWord"})," that takes two arguments: ",(0,i.jsx)(n.code,{children:"badWords"})," (an ",(0,i.jsx)(n.code,{children:"Array"})," of words that can't be used), and ",(0,i.jsx)(n.code,{children:"userName"})," (a ",(0,i.jsx)(n.code,{children:"String"})," entered by the user). Check to see if any of the words in ",(0,i.jsx)(n.code,{children:"badWords"})," are contained within ",(0,i.jsx)(n.code,{children:"userName"}),". Return the ",(0,i.jsx)(n.code,{children:"badWord"})," that was found, or ",(0,i.jsx)(n.code,{children:"null"})," if none are found."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"String"})," contains a Key/Value pair separated by a ",(0,i.jsx)(n.code,{children:'":"'}),". Using ",(0,i.jsx)(n.code,{children:"String"})," methods, how would you extract the two parts? Make sure you also deal with any extra spaces. For example, all of the following should be considered the same: ",(0,i.jsx)(n.code,{children:'"colour: blue"'}),", ",(0,i.jsx)(n.code,{children:'"colour:blue"'}),", ",(0,i.jsx)(n.code,{children:'"colour : blue"'}),", ",(0,i.jsx)(n.code,{children:'"colour: blue "'}),". Bonus: how could you use a ",(0,i.jsx)(n.code,{children:"RegExp"})," instead?"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"String"})," named ",(0,i.jsx)(n.code,{children:"addresses"})," contains a list of street addresses. Some of the addresses use short forms: ",(0,i.jsx)(n.code,{children:'"St."'})," instead of ",(0,i.jsx)(n.code,{children:'"Street"'})," and ",(0,i.jsx)(n.code,{children:'"Rd"'})," instead of ",(0,i.jsx)(n.code,{children:'"Road"'}),". Using ",(0,i.jsx)(n.code,{children:"String"})," methods, convert all these short forms to their full versions."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Room booking codes must take the following form: room number (",(0,i.jsx)(n.code,{children:"1-305"}),") followed by ",(0,i.jsx)(n.code,{children:"-"})," followed by the month as a number (",(0,i.jsx)(n.code,{children:"1-12"}),") followed by the day as a number (",(0,i.jsx)(n.code,{children:"1-31"}),"). For example, all of the following are valid: ",(0,i.jsx)(n.code,{children:'"1-1-1"'}),", ",(0,i.jsx)(n.code,{children:'"250-10-3"'}),", ",(0,i.jsx)(n.code,{children:'"66-12-12"'}),". Write a ",(0,i.jsx)(n.code,{children:"RegExp"})," to check whether a room booking code is valid or not, which allows any of the valid forms."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function that takes a ",(0,i.jsx)(n.code,{children:"String"})," and checks whether or not it begins with one of ",(0,i.jsx)(n.code,{children:'"Mr."'}),", ",(0,i.jsx)(n.code,{children:'"Mrs."'}),", or ",(0,i.jsx)(n.code,{children:'"Ms."'}),". Return ",(0,i.jsx)(n.code,{children:"true"})," if it does, otherwise ",(0,i.jsx)(n.code,{children:"false"}),". Bonus: try writing your solution using regular ",(0,i.jsx)(n.code,{children:"String"})," methods ",(0,i.jsx)(n.em,{children:"and"})," again as a ",(0,i.jsx)(n.code,{children:"RegExp"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function that takes a password ",(0,i.jsx)(n.code,{children:"String"}),", and validates it according to the following rules: must be between 8-32 characters in length; must contain one Capital Letter; must contain one Number; must contain one Symbol (",(0,i.jsx)(n.code,{children:"!@#$%^&*-+{}"}),"). Return ",(0,i.jsx)(n.code,{children:"true"})," if the given password is valid, otherwise ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a ",(0,i.jsx)(n.code,{children:"RegExp"})," for a Canadian Postal Code, for example ",(0,i.jsx)(n.code,{children:'"M3J 3M6"'}),". Allow spaces or no spaces, capitals or lower case."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"a-larger-problem-combining-everything",children:"A Larger Problem Combining Everything:"}),"\n",(0,i.jsxs)(n.p,{children:["You are ",(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(7841).A+"",children:"asked to write JavaScript code"})," to process a ",(0,i.jsx)(n.code,{children:"String"})," which is in the form of a ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Comma-separated_values",children:"Comma-Separated Values (CSV)"})," formatted data dump of user information. The data might look something like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csv",children:"0134134,John Smith,555-567-2341,62 inches\n0134135   ,    June    Lee    ,  5554126347 ,        149 cm\n0134136,       Kim Thomas       , 5324126347, 138cm`\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Write a series of functions to accomplish the following, building a larger program as you go. You can begin with ",(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(7841).A+"",children:"exercise.js"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Split the string into an ",(0,i.jsx)(n.code,{children:"Array"})," of separate rows (i.e., an ",(0,i.jsx)(n.code,{children:"Array"})," with rows separated by ",(0,i.jsx)(n.code,{children:"\\n"}),"). Bonus: how could we deal with data that includes both Unix (",(0,i.jsx)(n.code,{children:"\\n"}),") and Windows (",(0,i.jsx)(n.code,{children:"\\r\\n"}),") line endings?"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Each row contains information user info: ",(0,i.jsx)(n.code,{children:"ID"}),", ",(0,i.jsx)(n.code,{children:"Name"}),", ",(0,i.jsx)(n.code,{children:"Phone Number"}),", and ",(0,i.jsx)(n.code,{children:"Height"})," info all separated by commas. Split each row into an ",(0,i.jsx)(n.code,{children:"Array"})," with all of its different fields. You need to deal with extra and/or no whitespace between the commas."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Get rid of any extra spaces around the ",(0,i.jsx)(n.code,{children:"Name"})," field"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Using a ",(0,i.jsx)(n.code,{children:"RegExp"}),", extract the Area Code from the ",(0,i.jsx)(n.code,{children:"Phone Number"})," field. All ",(0,i.jsx)(n.code,{children:"Phone Number"}),"s are in one of two formats: ",(0,i.jsx)(n.code,{children:'"555-555-5555"'})," or ",(0,i.jsx)(n.code,{children:'"5555555555"'}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Check if the ",(0,i.jsx)(n.code,{children:"Height"})," field has ",(0,i.jsx)(n.code,{children:'"cm"'})," at the end. If it does, strip that out, convert the number to inches, and turn it into a ",(0,i.jsx)(n.code,{children:"String"})," in the form ",(0,i.jsx)(n.code,{children:'"xx inches"'}),". For example: ",(0,i.jsx)(n.code,{children:'"152 cm"'})," should become ",(0,i.jsx)(n.code,{children:'"59 inches"'}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["After doing all of the above steps, create a new record with ",(0,i.jsx)(n.code,{children:"ID"}),", ",(0,i.jsx)(n.code,{children:"Name"}),", ",(0,i.jsx)(n.code,{children:"Area Code"}),", ",(0,i.jsx)(n.code,{children:"Height In Inches"})," and separate them with commas"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Combine all these processed records into a new CSV formatted string, with rows separated by ",(0,i.jsx)(n.code,{children:"\\n"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A sample solution is provided in ",(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(9848).A+"",children:"solution.js"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},9848:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/files/solution-a94c91d422ed288aec2621cc1f74bace.js"}}]);