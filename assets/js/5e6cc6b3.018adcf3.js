"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[6326],{8053:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Client-side-Validation/HTML5-Form-Validation","title":"HTML5 Form Validation","description":"HTML5 Form Validation","source":"@site/docs/Client-side-Validation/HTML5-Form-Validation.md","sourceDirName":"Client-side-Validation","slug":"/Client-side-Validation/HTML5-Form-Validation","permalink":"/WebProgrammingPrinciples/Client-side-Validation/HTML5-Form-Validation","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Client-side-Validation/HTML5-Form-Validation.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"HTML5-Form-Validation","title":"HTML5 Form Validation","sidebar_position":1,"description":"HTML5 Form Validation"},"sidebar":"courseNotesSidebar","previous":{"title":"Practice Exercise","permalink":"/WebProgrammingPrinciples/Forms-Inputs/Practice-Exercise"},"next":{"title":"Using JavaScript","permalink":"/WebProgrammingPrinciples/Client-side-Validation/Using-JavaScript"}}');var r=t(4848),a=t(8453);const o={id:"HTML5-Form-Validation",title:"HTML5 Form Validation",sidebar_position:1,description:"HTML5 Form Validation"},s="HTML5 Form Validation",l={},d=[{value:"Client Side Form Validation",id:"client-side-form-validation",level:2},{value:"HTML5 Validation Features",id:"html5-validation-features",level:2},{value:"Email Address",id:"email-address",level:3},{value:"Telephone Number",id:"telephone-number",level:3},{value:"URL",id:"url",level:3},{value:"Dates and Times",id:"dates-and-times",level:3},{value:"Colour",id:"colour",level:3},{value:"Number",id:"number",level:3},{value:"Using Attributes to Prevent Invalid Data",id:"using-attributes-to-prevent-invalid-data",level:2},{value:"<code>placeholder</code> and <code>title</code>",id:"placeholder-and-title",level:3},{value:"<code>disabled</code>",id:"disabled",level:3},{value:"<code>required</code>",id:"required",level:3},{value:"<code>pattern</code>",id:"pattern",level:3},{value:"Suggested Readings",id:"suggested-readings",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"html5-form-validation",children:"HTML5 Form Validation"})}),"\n",(0,r.jsx)(n.h2,{id:"client-side-form-validation",children:"Client Side Form Validation"}),"\n",(0,r.jsxs)(n.p,{children:["When a user submits a form, we generally want to send the form's data to a server.\nWe use the form's ",(0,r.jsx)(n.code,{children:"action"})," to specify a server URL, and a ",(0,r.jsx)(n.code,{children:"method"})," to indicate the\nHTTP request type to use when sending the data."]}),"\n",(0,r.jsx)(n.p,{children:"Before we can use this data in a meaningful way, we need to validate it. It's\neasy for users to make typos, enter the right information but in the wrong field,\nor use a format we aren't expecting. We need to be able to parse and understand\nthe data using code. This means having data that follows some rules."}),"\n",(0,r.jsx)(n.p,{children:"In order to be able to work with user data, we have to provide some mechanisms for\nenforcing these rules, and give users hints, guides, and safety checks as they\nare entering data and submitting forms."}),"\n",(0,r.jsx)(n.p,{children:"We have two opportunities to validate form data:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Client-Side: before we submit the form to the server, we validate it in the browser\nusing HTML5 and JavaScript."}),"\n",(0,r.jsx)(n.li,{children:"Server-Side: after the data is submitted, the server must re-validate it."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"We will be focusing on client-side validation in this course."}),"\n",(0,r.jsx)(n.p,{children:"You might be wondering why we bother validating form data twice, if we're just going\nto re-validate it no matter what on the server. There are a number of reasons:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Save bandwidth: don't send data over the network if it's incomplete or not in the correct form"}),"\n",(0,r.jsx)(n.li,{children:"Immediate feedback: users don't have to wait for their data to travel all the way to the server, and the page to reload, before getting feedback that they need to correct something simple."}),"\n",(0,r.jsx)(n.li,{children:"Contextual feedback: prompt users to correct mistakes as they are entering the data vs. at the end, after they've moved on from entering some piece of information (e.g. a credit card)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"html5-validation-features",children:"HTML5 Validation Features"}),"\n",(0,r.jsxs)(n.p,{children:["We've already discussed a number of important ",(0,r.jsx)(n.code,{children:"<input>"})," types that allow us to\ntell the browser about the type of data we expect, for example ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number",children:(0,r.jsx)(n.code,{children:'<input type="tel">'})})," for telephone numbers\nor ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email",children:(0,r.jsx)(n.code,{children:'<input type="email">'})}),"\nfor email addresses."]}),"\n",(0,r.jsxs)(n.p,{children:["Each of these special purpose ",(0,r.jsx)(n.code,{children:"<input>"})," types comes with its own set of built-in data validation:"]}),"\n",(0,r.jsx)(n.h3,{id:"email-address",children:"Email Address"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email",children:(0,r.jsx)(n.code,{children:'<input type="email">'})})}),"\n",(0,r.jsxs)(n.p,{children:["An email address must not be an empty string, and must be a valid (i.e., text is in valid email format vs. email address actually exists). If you include the ",(0,r.jsx)(n.code,{children:"multiple"})," attribute, the control will allow a list of addresses, and validate each one."]}),"\n",(0,r.jsx)(n.h3,{id:"telephone-number",children:"Telephone Number"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number",children:(0,r.jsx)(n.code,{children:'<input type="tel">'})})}),"\n",(0,r.jsxs)(n.p,{children:["Phone numbers are very difficult to validate, because they ",(0,r.jsx)(n.a,{href:"https://github.com/googlei18n/libphonenumber/blob/master/FALSEHOODS.md",children:"differ so much around the world"}),".\nYou might think you could just check for something like ",(0,r.jsx)(n.code,{children:"555-555-5555"}),", but this would miss\nthings like country codes, number patterns that use a different number of digits, short-codes\nfor texting, 1-800 style numbers, etc."]}),"\n",(0,r.jsxs)(n.p,{children:["As a result, there is no default validation applied to a ",(0,r.jsx)(n.code,{children:"tel"})," type input."]}),"\n",(0,r.jsx)(n.h3,{id:"url",children:"URL"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url",children:(0,r.jsx)(n.code,{children:'<input type="url">'})})}),"\n",(0,r.jsxs)(n.p,{children:["Unlike telephone numbers, URLs ",(0,r.jsx)(n.em,{children:"can"})," be validated. If you use a ",(0,r.jsx)(n.code,{children:"url"})," type input, the browser\nwill make sure it is not empty, and that the value is a valid URL."]}),"\n",(0,r.jsx)(n.h3,{id:"dates-and-times",children:"Dates and Times"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date",children:(0,r.jsx)(n.code,{children:'<input type="date">'})}),", ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time",children:(0,r.jsx)(n.code,{children:'<input type="time">'})}),", ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/week",children:(0,r.jsx)(n.code,{children:'<input type="week">'})}),", ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/month",children:(0,r.jsx)(n.code,{children:'<input type="month">'})}),", ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date-local",children:(0,r.jsx)(n.code,{children:'<input type="date-local">'})})]}),"\n",(0,r.jsxs)(n.p,{children:['Dates and times are not validated by the browser. However, the user will usually be prompted\nto "pick" a date/time value visually instead of entering one as text. You can also further\nrestrict the date/time by adding a ',(0,r.jsx)(n.code,{children:'min="..."'})," or ",(0,r.jsx)(n.code,{children:'max="..."'})," to the ",(0,r.jsx)(n.code,{children:"input"}),", which\nspecifies a date/time to use as a lower or upper range when validating."]}),"\n",(0,r.jsx)(n.h3,{id:"colour",children:"Colour"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/color",children:(0,r.jsx)(n.code,{children:'<input type="color">'})})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"color"}),"'s value is considered to be invalid if it can't be converted (by the browser) into a\nseven-character lower-case hexadecimal value (e.g., ",(0,r.jsx)(n.code,{children:"#000000"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"number",children:"Number"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number",children:(0,r.jsx)(n.code,{children:'<input type="number">'})}),", ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range",children:(0,r.jsx)(n.code,{children:'<input type="range">'})})]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"number"})," must be a valid number, or the browser won't allow it. You can also further\nrestrict the number's value by adding a ",(0,r.jsx)(n.code,{children:'min="..."'})," or ",(0,r.jsx)(n.code,{children:'max="..."'})," to the ",(0,r.jsx)(n.code,{children:"input"}),", which\nspecifies a lower or upper range when validating."]}),"\n",(0,r.jsx)(n.h2,{id:"using-attributes-to-prevent-invalid-data",children:"Using Attributes to Prevent Invalid Data"}),"\n",(0,r.jsxs)(n.p,{children:["Beyond choosing trying to choose the most appropriate ",(0,r.jsx)(n.code,{children:"<input>"})," type for your data,\nanother layer of client-side validation comes from using attributes to indicate\nto both the user and browser what we expect to be entered."]}),"\n",(0,r.jsxs)(n.h3,{id:"placeholder-and-title",children:[(0,r.jsx)(n.code,{children:"placeholder"})," and ",(0,r.jsx)(n.code,{children:"title"})]}),"\n",(0,r.jsxs)(n.p,{children:["We've discussed ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Labels_and_placeholders",children:(0,r.jsx)(n.code,{children:"placeholder"})})," previously as part of our forms and CSS discussion. It's important to highlight it once again\nsince it also plays an important role in helping the user understand how to enter\ndata properly."]}),"\n",(0,r.jsxs)(n.p,{children:["Together with ",(0,r.jsx)(n.code,{children:"<label>"}),"s and the ",(0,r.jsx)(n.code,{children:"title"})," attribute (shown when you hover over\nan element in a tooltip), these extra bits of text provide important clues and\ninstructions about how to use a given input control."]}),"\n",(0,r.jsx)(n.p,{children:"For example, if we are expecting the user to enter a list of email addresses,\nwe could do the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<label for="address-list">Email Address List</label>\n<input\n  id="address-list"\n  type="email"\n  multiple\n  placeholder="name1@example.com, name2@example.com, ..."\n  title="List of email addresses, separated by commas"\n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"disabled",children:(0,r.jsx)(n.code,{children:"disabled"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#disabled",children:[(0,r.jsx)(n.code,{children:"disabled"})," attribute"]}),"\nis a boolean (i.e., it is present or not present) that indicates that a field cannot\nbe interacted with by the user. In the browser it will show up with a dimmer colour,\nand clicking it will have no effect."]}),"\n",(0,r.jsxs)(n.p,{children:["We can use ",(0,r.jsx)(n.code,{children:"disabled"})," to turn off certain controls in a form that don't currently apply.\nSometimes a form will have options with dependencies on other controls. For example,\nbooking a flight that is one-way vs. two-way and whether or not you\nneed a second date entered for the return trip."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<form action="/s" name="login">\n  <input type="text" name="flight" />\n  <input type="date" name="date1" />\n  <input type="checkbox" name="return-flight" />\n  <input type="date" value="date2" disabled />\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"disabled"})," allows us to include and display optional input options in a form\nwithout polluting the data by accidentally allowing the user to enter information\nthat isn't appropriate."]}),"\n",(0,r.jsx)(n.h3,{id:"required",children:(0,r.jsx)(n.code,{children:"required"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#required",children:[(0,r.jsx)(n.code,{children:"required"})," attribute"]})," is a boolean (i.e., it is present or not present) that indicates\nthat a field ",(0,r.jsx)(n.strong,{children:"must"})," have a value before the user can submit the form. The browser\nwill block attempts to submit until a value has been entered."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<form action="/s" name="login">\n  <input type="text" name="username" required />\n  <input type="password" name="password" required />\n  <input type="submit" value="Login" />\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In the form above, both the ",(0,r.jsx)(n.code,{children:"username"})," and ",(0,r.jsx)(n.code,{children:"password"})," fields are required, and must\nhave a value before the form can be submitted (i..e, by clicking the ",(0,r.jsx)(n.code,{children:"Login"})," button).\nNotice that the ",(0,r.jsx)(n.code,{children:"submit"})," control does not have ",(0,r.jsx)(n.code,{children:"required"})," attribute."]}),"\n",(0,r.jsxs)(n.p,{children:["When a field has the ",(0,r.jsx)(n.code,{children:"required"})," attribute, the browser automatically applies the ",(0,r.jsx)(n.code,{children:":required"}),"\npseudo-class. On the other hand, any field ",(0,r.jsx)(n.em,{children:"without"})," the ",(0,r.jsx)(n.code,{children:"required"})," attribute automatically\ngets the ",(0,r.jsx)(n.code,{children:":optional"})," pseudo-class applied. This can be useful in CSS styling."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:"input:required {\n  /* styles for required input controls */\n}\n\ninput:optional {\n  /* styles for optional input controls */\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pattern",children:(0,r.jsx)(n.code,{children:"pattern"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validating_against_a_regular_expression",children:[(0,r.jsx)(n.code,{children:"pattern"})," attribute"]}),"\nallows us to include a regular expression for the browser to use when validating\nthe value entered by a user for a given input control."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, imagine if we need the user to enter a file extension and want to support\ndata of the following form ",(0,r.jsx)(n.code,{children:".exe"}),", ",(0,r.jsx)(n.code,{children:".EXE"}),", or ",(0,r.jsx)(n.code,{children:"exe"}),".:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<input name="file-extension" type="text" placeholder=".exe" pattern="\\.?[a-zA-Z]{3}" />\n'})}),"\n",(0,r.jsx)(n.p,{children:"Consider how you might write a regular expression for each of the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"social security number (###-##-####)"}),"\n",(0,r.jsx)(n.li,{children:"phone number (555-555-5555 or 555-5555 or (555) 555-555)"}),"\n",(0,r.jsx)(n.li,{children:"ip address (127.0.0.1 or 255.255.255.255)"}),"\n",(0,r.jsx)(n.li,{children:"username (alpha, numbers underscore, dash, 8-16 long)"}),"\n",(0,r.jsx)(n.li,{children:"password (alpha, number, symbols, underscore, dash, up to 256 long)"}),"\n",(0,r.jsx)(n.li,{children:"postal code (m5w 1e6 or M5W 1E6 or M5W1E6)"}),"\n",(0,r.jsx)(n.li,{children:"price ($1.50 or 1.50 or 1)"}),"\n",(0,r.jsx)(n.li,{children:"seneca course code (ABC123SSA)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"suggested-readings",children:"Suggested Readings"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation",children:"HTML Form Validation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../../static-site-hosting.md",children:"Static Site Hosting"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);