"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[178],{288:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/inspect-bd7cd5ddfe5dbd3bdbc7f9d049ecec35.gif"},1042:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/dom-tree-a23d8298485aa1c3b2120c782f5c1635.png"},2714:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/p-node-1f9763ab9c66e64e960a3f2d56db203e.png"},5202:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/window-document-images-dc166571e60e9f00d5665372788e3b3e.png"},6593:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"DOM-Events/DOM-Introduction","title":"DOM Introduction","description":"DOM Introduction","source":"@site/docs/DOM-Events/DOM-Introduction.md","sourceDirName":"DOM-Events","slug":"/DOM-Events/DOM-Introduction","permalink":"/WebProgrammingPrinciples/DOM-Events/DOM-Introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/DOM-Events/DOM-Introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"DOM-Introduction","title":"DOM Introduction","sidebar_position":1,"description":"DOM Introduction"},"sidebar":"courseNotesSidebar","previous":{"title":"Practical Examples","permalink":"/WebProgrammingPrinciples/Elements-Media/Practical-Examples"},"next":{"title":"Events & Timers","permalink":"/WebProgrammingPrinciples/DOM-Events/Events-Timers"}}');var s=t(4848),r=t(8453);const o={id:"DOM-Introduction",title:"DOM Introduction",sidebar_position:1,description:"DOM Introduction"},d="DOM Introduction",l={},a=[{value:"From HTML to the DOM",id:"from-html-to-the-dom",level:2},{value:"Programming the DOM",id:"programming-the-dom",level:2},{value:"Finding elements in the DOM with JavaScript",id:"finding-elements-in-the-dom-with-javascript",level:3},{value:"Creating elements and Modifying the DOM with JavaScript",id:"creating-elements-and-modifying-the-dom-with-javascript",level:3},{value:"Examples",id:"examples",level:3},{value:"Inspecting, Modifying a DOM element with JavaScript",id:"inspecting-modifying-a-dom-element-with-javascript",level:3},{value:"Element Properties",id:"element-properties",level:3},{value:"Element Methods",id:"element-methods",level:3},{value:"Examples",id:"examples-1",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dom-introduction",children:"DOM Introduction"})}),"\n",(0,s.jsx)(n.h2,{id:"from-html-to-the-dom",children:"From HTML to the DOM"}),"\n",(0,s.jsx)(n.p,{children:"Web pages rely on HTML for their initial structure and content. We write web pages using HTML,\nand then use web browsers to parse and render that HTML into a living (i.e., modifiable at runtime)\ntree structure. Consider the following HTML web page:"}),"\n",(0,s.jsx)(n.p,{children:"The DOM Tree is a living version of our HTML."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <title>This is a Document!</title>\n    <meta charset="utf-8" />\n  </head>\n  <body>\n    <h1>Welcome!</h1>\n    <p>This is a paragraph with a <a href="index.html">link</a> in it.</p>\n    <ul>\n      <li>first item</li>\n      <li>second item</li>\n      <li>third item</li>\n    </ul>\n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The browser will parse and render this into a tree of nodes, the ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Document_Object_Model",children:"DOM Tree"}),":"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"DOM Tree for our HTML",src:t(1042).A+"",width:"1063",height:"590"})}),"\n",(0,s.jsxs)(n.p,{children:["The DOM Tree is made up of DOM Nodes, which represent all aspects of our document,\nfrom elements to attributes and comments. We'll refer to nodes and elements interchangeably,\nbecause all elements are nodes in the tree. However, there are also other types of nodes,\nfor example: text nodes (the text in a block element) and attribute nodes (key/value pairs).\nWe don't always show every node in our diagrams. Consider the ",(0,s.jsx)(n.code,{children:"<p>"})," element from the example\nabove:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<p>This is a paragraph with a <a href="index.html">link</a> in it.</p>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Here are the nodes that would be created:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"DOM Nodes in our p example",src:t(2714).A+"",width:"560",height:"416"})}),"\n",(0,s.jsx)(n.p,{children:"In this diagram, the gray, square boxes represent element nodes, while the white, rounded boxes are text nodes."}),"\n",(0,s.jsxs)(n.p,{children:["When we load a web page in a web browser, we see its fully parsed and rendered form.\nThe web browser ",(0,s.jsx)(n.em,{children:"begins"})," with the initial content we provide in our HTML. We can see the\ninitial source HTML for any page we visit, whether we authored it or not:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"View Source in Browser",src:t(7931).A+"",width:"888",height:"797"})}),"\n",(0,s.jsxs)(n.p,{children:["Our DOM Tree gets its name because of its shape: a ",(0,s.jsx)(n.em,{children:"root"})," element connected to ",(0,s.jsx)(n.em,{children:"child"})," nodes that extend\nlike the branches of a tree. This tree structure is how the browser views our web page,\nand is why it is so important for us to open and close our HTML tags in order (i.e., our tags\ndefine the structure of the tree that the browser will create at runtime)."]}),"\n",(0,s.jsx)(n.p,{children:"As web developers we can see and interact with the DOM tree for a page using the browser's\nbuilt-in developer tools:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Element Inspector in Dev Tools",src:t(288).A+"",width:"889",height:"798"})}),"\n",(0,s.jsxs)(n.p,{children:["The dev tools allow us to ",(0,s.jsx)(n.a,{href:"https://developers.google.com/web/tools/chrome-devtools/beginners/html",children:"view and work with"}),"\nthe parsed DOM elements in a page. We can also use the dev tools to visually select\nan element in the page, and find its associated DOM element:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Find Individual Elements in a Web Page",src:t(8279).A+"",width:"889",height:"798"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["NOTE: it's a good idea to get experience using, and learn about your browser's dev tools so that you can debug and understand when things go wrong while you are doing web development. There are a number of guides to help you learn, like ",(0,s.jsx)(n.a,{href:"https://developers.google.com/web/tools/chrome-devtools/",children:"this one from Google"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"programming-the-dom",children:"Programming the DOM"}),"\n",(0,s.jsxs)(n.p,{children:["Web pages are dynamic: they can change in response to user actions, different data,\nJavaScript code, etc. Where HTML defines the initial structure and content of a page,\nthe DOM is the ",(0,s.jsx)(n.em,{children:"current"})," or ",(0,s.jsx)(n.em,{children:"actual"})," content of the page as it exists right now in your browser.\nAnd this can mean something quite different from the initial HTML used to load the page."]}),"\n",(0,s.jsx)(n.p,{children:"Consider a web page like GMail (or another email web client). When you visit your Inbox, the\nmessages you see are not the same as when your friend visits hers. The HTML for GMail is the same\nno matter who loads the page. But it quickly changes in response to the needs of the current user."}),"\n",(0,s.jsx)(n.p,{children:"So how does one modify a web page after it's been rendered in the browser? The answer is DOM programming.\nWe've been using this \"DOM\" acronym without defining it, and its high time we did."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction",children:"Document Object Model (DOM)"})," is a programming interface (i.e., set of Objects, functions, properties) allowing scripts to interact with, and modify documents (HTML, XML). The DOM is an object-oriented representation of a web page. Client-side web programming is essentially ",(0,s.jsx)(n.em,{children:"using"})," the DOM via JavaScript to make web pages ",(0,s.jsx)(n.em,{children:"do"})," things or ",(0,s.jsx)(n.em,{children:"respond"})," to actions (e.g., user actions)."]}),"\n",(0,s.jsx)(n.p,{children:'You may have noticed in our work with JavaScript that there was nothing particularly "webby" about\nit as a language: we wrote functions, worked with arrays, created objects. Lots of programming\nlanguages let you do this. JavaScript can\'t do anything with the web on its own. Instead, we need\nto access and use the Objects, functions, and properties made available to us by the DOM using JavaScript.'}),"\n",(0,s.jsx)(n.p,{children:"As web programmers we use the DOM via JavaScript to accomplish a number of important tasks:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Finding and getting references to elements in the page"}),"\n",(0,s.jsx)(n.li,{children:"Creating, adding, and removing elements from the DOM tree"}),"\n",(0,s.jsx)(n.li,{children:"Inspecting and modifying elements and their content"}),"\n",(0,s.jsx)(n.li,{children:"Run code in response to events triggered by the user, browser, or other parts of our code"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Let's look at each one in turn."}),"\n",(0,s.jsx)(n.h3,{id:"finding-elements-in-the-dom-with-javascript",children:"Finding elements in the DOM with JavaScript"}),"\n",(0,s.jsxs)(n.p,{children:["Our entry point to the DOM from JavaScript is via the global variable ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window",children:(0,s.jsx)(n.code,{children:"window"})}),".\nEvery web page runs in an environment created by the browser, and that environment includes\na global variable named ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Global_object#window_object_in_the_Browser",children:(0,s.jsx)(n.code,{children:"window"})}),",\nwhich is provided by the browser (i.e., we don't create it)."]}),"\n",(0,s.jsxs)(n.p,{children:["There are hundreds of Objects, methods, and properties available to our JavaScript code\nvia ",(0,s.jsx)(n.code,{children:"window"}),". One example is ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document",children:(0,s.jsx)(n.code,{children:"window.document"})}),",\nwhich is how we access the DOM in our code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Access the document object for our web page, which is in the current window\nlet document = window.document;\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["NOTE: since properties like ",(0,s.jsx)(n.code,{children:"document"})," are available on the global ",(0,s.jsx)(n.code,{children:"window"})," object, it is common to simply write ",(0,s.jsx)(n.code,{children:"document"})," instead of ",(0,s.jsx)(n.code,{children:"window.document"}),", since the global object is implied if no other scope is given."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Our document's tree of elements are now accessible to us, and we can access a number of\nwell-known elements by name, for example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Get the value of the document's <title>\nlet title = document.title;\n\n// Return a reference to the document's <body> element\nlet body = document.body;\n\n// Return a list of all <a> elements in the document\nlet hyperlinks = document.links;\n\n// Return a list of all the <img> elements in the document\nlet images = document.images;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["There are lots more. We can easily experiment with these in the dev tools web console,\nwhere we can access our ",(0,s.jsx)(n.code,{children:"window"})," object. For example, here is the web page\n",(0,s.jsx)(n.a,{href:"https://unsplash.com/search/photos/toronto",children:"https://unsplash.com/search/photos/toronto"})," with the\nweb console open, and the result of ",(0,s.jsx)(n.code,{children:"window.document.images"})," is shown, 41 ",(0,s.jsx)(n.code,{children:"<img>"})," elements\nare returned in a collection:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"window.document.images via the Web Console",src:t(5202).A+"",width:"2010",height:"1830"})}),"\n",(0,s.jsx)(n.p,{children:"We can also use a number of methods to search for and get a reference to one or more\nelements in our document:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById",children:(0,s.jsx)(n.code,{children:"document.getElementById(id)"})})," - returns an element whose ",(0,s.jsx)(n.code,{children:"id"})," attribute/property has the given ",(0,s.jsx)(n.code,{children:"id"})," ",(0,s.jsx)(n.code,{children:"String"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<div id=\"menu\">...</div>\n<script>\n  let menuDiv = document.getElementById('menu');\n<\/script>\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector",children:(0,s.jsx)(n.code,{children:"document.querySelector(selectors)"})})," - similar to ",(0,s.jsx)(n.code,{children:"document.getElementById(id)"}),", but also allows querying the DOM using ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors",children:"CSS selectors"})," for an element that doesn't have a unique id:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<div id=\"menu\">\n  <p class=\"formatted\">...</p>\n</div>\n<script>\n  // We can specify we want to query by ID using a leading #\n  let menuDiv = document.querySelector('#menu');\n  // We can specify we want to query by CLASS name using a leading .\n  let para = document.querySelector('.formatted');\n<\/script>\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll",children:(0,s.jsx)(n.code,{children:"document.querySelectorAll(selectors)"})})," - similar to ",(0,s.jsx)(n.code,{children:"document.querySelector(selector)"}),", but returns ",(0,s.jsx)(n.em,{children:"all"})," elements that match the selectors as a ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/NodeList",children:(0,s.jsx)(n.code,{children:"NodeList"})}),":","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div id="menu">\n  <p class="formatted">Paragraph 1...</p>\n  <p class="formatted">Paragraph 2...</p>\n  <p class="formatted">Paragraph 3...</p>\n</div>\n<script>\n  // Get all <p> elements in the document as a list\n  let pElements = document.querySelectorAll(\'p\');\n  // Loop through all returned <p> elements in our list\n  pElements.forEach(function (p) {\n    // p is one of the returned <p> elements\n  });\n<\/script>\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["These four methods will work in any situation where you need to get a reference to\nsomething in document. In fact, you could rely solely on ",(0,s.jsx)(n.code,{children:"document.querySelector()"})," and\n",(0,s.jsx)(n.code,{children:"document.querySelectorAll()"}),", which cover the same functionality as a number of other\nDOM methods:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// The following two lines of code do exactly the same thing.\n// NOTE the use of # to indicate `demo` is an id in the second example.\nlet elem = document.getElementById('demo');\nlet elem = document.querySelector('#demo');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"creating-elements-and-modifying-the-dom-with-javascript",children:"Creating elements and Modifying the DOM with JavaScript"}),"\n",(0,s.jsx)(n.p,{children:"In addition to searching through the DOM using JavaScript, we can also make changes to it. The DOM provides a number\nof methods that allow use to create new content:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement",children:(0,s.jsx)(n.code,{children:"document.createElement(name)"})})," - creates and returns a new element of the type specified by ",(0,s.jsx)(n.code,{children:"name"}),".","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"let paragraphElement = document.createElement('p');\nlet imageElement = document.createElement('img');\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode",children:(0,s.jsx)(n.code,{children:"document.createTextNode(text)"})})," - creates a text node (the text within an element vs. the element itself).","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"let textNode = document.createTextNode('This is some text to show in an element');\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["These methods create the new nodes, but do not place them into the page. To do that, we first need to find\nthe correct position within the existing DOM tree, and then add our new node. We have to be clear ",(0,s.jsx)(n.em,{children:"where"})," we want\nthe new element to get placed in the DOM."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if we want to place a node at the end of the ",(0,s.jsx)(n.code,{children:"<body>"}),", we could use ",(0,s.jsx)(n.code,{children:".appendChild()"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"let paragraphElement = document.createElement('p');\ndocument.body.appendChild(paragraphElement);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If we instead wanted to place it within an existing ",(0,s.jsx)(n.code,{children:'<div id="content">'}),", we'd do this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"let paragraphElement = document.createElement('p');\nlet contentDiv = document.querySelector('#content');\ncontentDiv.appendChild(paragraphElement);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Both examples work the same way: given a parent node (",(0,s.jsx)(n.code,{children:"document"})," or ",(0,s.jsx)(n.code,{children:'<div id="content">'}),"), add\n(append to the end of the list of children) our new element."]}),"\n",(0,s.jsxs)(n.p,{children:["We can also use ",(0,s.jsx)(n.code,{children:".insertBefore(new, old)"})," to accomplish something similar: add our new node before\nthe ",(0,s.jsx)(n.code,{children:"old"})," (existing) node in the DOM:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"let paragraphElement = document.createElement('p');\nlet contentDiv = document.querySelector('#content');\nlet firstDivParagraph = contentDiv.querySelector('p');\ncontentDiv.insertBefore(paragraphElement, firstDivParagraph);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Removing a node is similar, and uses ",(0,s.jsx)(n.code,{children:"removeChild()"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Remove a loading spinner\nlet loadingSpinner = document.querySelector('#loading-spinner');\n// Get a reference to the loading spinner's parent element\nlet parent = loadingSpinner.parentNode;\nparent.removeChild(loadingSpinner);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add a new heading to a document"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Create a new <h2> element\nlet newHeading = document.createElement('h2');\n\n// Add some text to the <h2> element we just created.\n// Similar to doing <h2>This is a heading</h2>.\nlet textNode = document.createTextNode('This is a heading');\n// Add the textNode to the heading's child list\nnewHeading.appendChild(textNode);\n\n// Insert our heading into the document, at the end of <body>\ndocument.body.appendChild(newHeading);\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create a new paragraph and insert into the document"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<div id=\"demo\"></div>\n<script>\n  // Create a <p> element\n  let pElem = document.createElement('p');\n\n  // Use .innerHTML to create text nodes inside our <p>...</p>\n  pElem.innerHTML = 'This is a paragraph.';\n\n  // Get a reference to our <div> with id = demo\n  let demoDiv = document.querySelector('#demo');\n\n  // Append our <p> element to the <div>\n  demoDiv.appendChild(pElem);\n<\/script>\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"inspecting-modifying-a-dom-element-with-javascript",children:"Inspecting, Modifying a DOM element with JavaScript"}),"\n",(0,s.jsx)(n.p,{children:"Once we have a reference to an element in JavaScript, we use a number of properties and methods to\nwork with it."}),"\n",(0,s.jsx)(n.h3,{id:"element-properties",children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Element#Properties",children:"Element Properties"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"element.id"})," - the ",(0,s.jsx)(n.code,{children:"id"})," of the element. For example: ",(0,s.jsx)(n.code,{children:'<p id="intro"></p>'})," has an ",(0,s.jsx)(n.code,{children:"id"})," of ",(0,s.jsx)(n.code,{children:'"intro"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"element.innerHTML"})," - gets or sets the markup contained within the element, which could be text, but could also include other HTML tags."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"element.parentNode"})," - gets a reference to the parent ",(0,s.jsx)(n.code,{children:"node"})," of this element in the DOM."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"element.nextSibling"})," - gets a reference to the sibling element of this element, if any."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"element.className"})," - gets or sets the value of the ",(0,s.jsx)(n.code,{children:"class"})," attribute for the element."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"element-methods",children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Element#Methods",children:"Element Methods"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"element.querySelector()"})," - same as ",(0,s.jsx)(n.code,{children:"document.querySelector()"}),", but begins searching from ",(0,s.jsx)(n.code,{children:"element"})," vs. ",(0,s.jsx)(n.code,{children:"document"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"element.querySelectorAll()"})," - same as ",(0,s.jsx)(n.code,{children:"document.querySelectorAll()"}),", but begins searching from ",(0,s.jsx)(n.code,{children:"element"})," vs. ",(0,s.jsx)(n.code,{children:"document"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"element.scrollIntoView()"})," - scrolls the page until the element is in view."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"element.hasAttribute(name)"})," - checks if the attribute ",(0,s.jsx)(n.code,{children:"name"})," exists on this ",(0,s.jsx)(n.code,{children:"element"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"element.getAttribute(name)"})," - gets the value of the attribute ",(0,s.jsx)(n.code,{children:"name"})," on this ",(0,s.jsx)(n.code,{children:"element"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"element.setAttribute(name, value)"})," - sets the ",(0,s.jsx)(n.code,{children:"value"})," of the attribute ",(0,s.jsx)(n.code,{children:"name"})," on this ",(0,s.jsx)(n.code,{children:"element"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"element.removeAttribute(name)"})," - removes the attribute ",(0,s.jsx)(n.code,{children:"name"})," from this ",(0,s.jsx)(n.code,{children:"element"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples-1",children:"Examples"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Reveal an error message in the page, by removing an element's ",(0,s.jsx)(n.code,{children:"hidden"})," attribute"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"\x3c!-- The `hidden` attribute means this <div> won't be displayed until it's removed --\x3e\n<div id=\"error-message\" hidden>\n  <p>There was an error saving the document. Please try again!</p>\n</div>\n<script>\n  // Try to save the file, and\n  let error = saveFile();\n  if (error) {\n    let elem = document.querySelector('#error-message');\n    elem.removeAttribute('hidden');\n  }\n<\/script>\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Insert a user's profile picture into the page"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Insert the user's picture (e.g., in response to hovering over a username)\nlet profilePic = document.createElement('img');\n\n// Set attributes via getters/setters on the element vs. attributes\nprofilePic.id = 'user-' + username;\nprofilePic.height = 50;\nprofilePic.src = './images/' + username + '-user-profile.jpg';\n\n// Insert the profile pic <img> into the document\ndocument.body.appendChild(profilePic);\n\n// Make sure the new image is visible, or scroll until it is\nprofilePic.scrollIntoView();\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add new paragraph elements to a div"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Use .innerHTML as a getter and setter to update some text\nlet elem = document.querySelector('#text');\n\nelem.innerHTML = '<p>This is a paragraph</p>';\nelem.innerHTML = elem.innerHTML + '<p>This is another paragraph</p>';\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},7931:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/view-source-40f432aa794e59406ffa392aed806941.gif"},8279:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/inspect-element-cca39ef838882c0438573445ce042169.gif"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);