"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[9579],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},9006:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"JSON-Dynamic-Data/AJAX-Fundamentals","title":"AJAX Fundamentals","description":"AJAX Fundamentals","source":"@site/docs/JSON-Dynamic-Data/AJAX-Fundamentals.md","sourceDirName":"JSON-Dynamic-Data","slug":"/JSON-Dynamic-Data/AJAX-Fundamentals","permalink":"/WebProgrammingPrinciples/JSON-Dynamic-Data/AJAX-Fundamentals","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/JSON-Dynamic-Data/AJAX-Fundamentals.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"AJAX-Fundamentals","title":"AJAX Fundamentals","sidebar_position":1,"description":"AJAX Fundamentals"},"sidebar":"courseNotesSidebar","previous":{"title":"Using JavaScript","permalink":"/WebProgrammingPrinciples/Client-side-Validation/Using-JavaScript"},"next":{"title":"Data Formats","permalink":"/WebProgrammingPrinciples/JSON-Dynamic-Data/Data-Formats"}}');var r=t(4848),s=t(8453);const i={id:"AJAX-Fundamentals",title:"AJAX Fundamentals",sidebar_position:1,description:"AJAX Fundamentals"},o="AJAX Fundamentals",d={},l=[{value:"AJAX",id:"ajax",level:2},{value:"Understanding AJAX&#39;s &quot;A&quot; (Asynchronous) and &quot;J&quot; (JavaScript)",id:"understanding-ajaxs-a-asynchronous-and-j-javascript",level:2},{value:"Example 1: Current Bitcoin Value in USD",id:"example-1-current-bitcoin-value-in-usd",level:2},{value:"Suggested Readings",id:"suggested-readings",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ajax-fundamentals",children:"AJAX Fundamentals"})}),"\n",(0,r.jsx)(n.h2,{id:"ajax",children:"AJAX"}),"\n",(0,r.jsxs)(n.p,{children:["AJAX is a term ",(0,r.jsx)(n.a,{href:"http://adaptivepath.org/ideas/ajax-new-approach-web-applications/",children:"coined in 2005 by Jesse James Garrett"})," that refers\nto an approach to web development that uses dynamic requests to a server to\nupdate portions of a page at runtime. Today, the method is so common that\nit's hard to talk about it not existing. But at the time, it was a game changer."]}),"\n",(0,r.jsxs)(n.p,{children:["AJAX stands for Asynchronous JavaScript and XML, which is based on a group of\nweb technologies: HTML (and at the time XHTML), CSS, JavaScript, the DOM, XML,\nJSON, and a web API called ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",children:"XMLHttpRequest"}),", or just\nXHR for short."]}),"\n",(0,r.jsx)(n.p,{children:"Before 2005, web browsers lacked a lot of the modern features we take for granted\ntoday. Web servers were used to build and serve all (or most) aspects of a web\npage. Making changes on the page meant a full request/response trip to and from\nthe server, in order to update content. The entire page had to be reloaded for\nanything of significance to change."}),"\n",(0,r.jsx)(n.p,{children:'Today we expect "real-time" data to be a part of our web browsing experience.\nConsider a site like GMail or Google Maps. If we want to see messages in\nanother folder, or navigate to another city, we expect to be able to do that\nwithout having to reload the entire page. AJAX makes this possible.'}),"\n",(0,r.jsx)(n.p,{children:"Instead of modifying the entire page (DOM), we instead make background requests\nfor data from servers, and then use that data to update the page's contents\nlive via the DOM's APIs."}),"\n",(0,r.jsx)(n.h2,{id:"understanding-ajaxs-a-asynchronous-and-j-javascript",children:'Understanding AJAX\'s "A" (Asynchronous) and "J" (JavaScript)'}),"\n",(0,r.jsx)(n.p,{children:"As we know from previous discussions, web browsers use HTTP/HTTPS to send\nrequests to web servers, which build replies and send back responses (HTML, CSS,\nimages, fonts, JavaScript, etc)."}),"\n",(0,r.jsx)(n.p,{children:"While we don't want to have to reload the entire page in order to get updates\nfrom the server, we would like to be able to leverage this communication pattern\nfrom within the running page: we need a way to make HTTP requests, wait for\nresponses from the server, and then do something with the data."}),"\n",(0,r.jsxs)(n.p,{children:["Browsers provide a mechanism for doing this in the form of the ",(0,r.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",children:[(0,r.jsx)(n.code,{children:"XMLHttpRequest"}),"\nObject"]}),", or\nXHR for short. An XHR object let's us create and send HTTP requests to a server,\nand get back data responses in various forms (XML, HTML, JSON, text, binary, etc.)"]}),"\n",(0,r.jsx)(n.p,{children:"Our XHR requests happen in the background, asynchronously (without blocking the\nmain UI thread in the browser), so user's can continue to work and interact with\nthe page while we wait for a response."}),"\n",(0,r.jsx)(n.p,{children:"Finally, we work with XHR via JavaScript code. Let's look at a very basic\nexample:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 1. Create a new instance of an XMLHttpRequest Object using its constructor\nvar xhr = new XMLHttpRequest();\n\n// 2. Define an event handler for the `load` event, which happens when data arrives\nxhr.onload = function () {\n  // 3. Get the data from the `xhr` object's `responseText` property\n  var data = this.responseText;\n  console.log('data arrived', data);\n};\n\n// 4. Create an HTTP GET request to the given URL\nxhr.open('GET', 'http://example.com');\n\n// 5. Send the HTTP request to the server, and wait asynchronously for the reply\nxhr.send();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-1-current-bitcoin-value-in-usd",children:"Example 1: Current Bitcoin Value in USD"}),"\n",(0,r.jsxs)(n.p,{children:["To demonstrate a real-world example of what we've been discussing, let's\nbuild a simple example. Imagine we want to create a web page that includes\ninformation about the current market value of ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Bitcoin",children:"Bitcoin"}),", the most famous of the blockchain-based\ncryptocurrencies."]}),"\n",(0,r.jsxs)(n.p,{children:["The website ",(0,r.jsx)(n.a,{href:"https://www.blockchain.com",children:"https://www.blockchain.com"})," provides a number of web services we can use to get this information. In particular,\nwe'll use ",(0,r.jsx)(n.a,{href:"https://blockchain.info/q/24hrprice",children:"https://blockchain.info/q/24hrprice"}),", which gives the price in US dollars\nover the past 24 hours."]}),"\n",(0,r.jsx)(n.p,{children:"Here's an (simplified) example of what it sends when we make an HTTP request:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"HTTP/2 200\ndate: Sun, 02 Dec 2018 22:48:35 GMT\ncontent-type: text/plain; charset=utf-8\n\n4200.82\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the above response, we have HTTP headers, a blank line, and then the data: ",(0,r.jsx)(n.code,{children:"4200.82"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"We want our web page to include this information, but then automatically update\nit every minute by requesting the current value again over HTTP. Here's\none way we could do it."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Bitcoin Value</title>\n  </head>\n  <body>\n    <p>Current Bitcoin value: <span id=\"bitcoin-value\"></span></p>\n    <script>\n      function updateBitcoinValue(newValue) {\n        // Update the <span> with the new value we get from the server\n        var span = document.querySelector('#bitcoin-value');\n        span.innerHTML = newValue;\n\n        // Every minute, get the new value and update the page\n        var oneMinute = 60 * 1000;\n        setTimeout(getCurrentValue, oneMinute);\n      }\n\n      function getCurrentValue() {\n        var xhr = new XMLHttpRequest();\n        var url = 'https://blockchain.info/q/24hrprice?cors=true';\n\n        // If/When the request returns successfully, get the value and update DOM\n        xhr.onload = function () {\n          // Format the raw text we get from the server into a currency string\n          var response = this.responseText;\n          var currentValue = `${response} (USD)`;\n          updateBitcoinValue(currentValue);\n        };\n\n        // If the request fails, and we get an error, update the page with an error message\n        xhr.onerror = function (e) {\n          updateBitcoinValue('unknown (error, unable to get current value)');\n        };\n\n        // Open a GET request to the Blockchain API\n        xhr.open('GET', url);\n\n        // Send our HTTP request to the server, and wait for a response\n        xhr.send();\n      }\n\n      window.onload = function () {\n        getCurrentValue();\n      };\n    <\/script>\n  </body>\n</html>\n"})}),"\n",(0,r.jsx)(n.p,{children:"By separating the data into a separate web service, it's possible for various\napplications to all share it, and use it in different ways."}),"\n",(0,r.jsx)(n.h2,{id:"suggested-readings",children:"Suggested Readings"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX",children:"AJAX Guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON",children:"Working with JSON"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest",children:"Using XMLHttpRequest"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);