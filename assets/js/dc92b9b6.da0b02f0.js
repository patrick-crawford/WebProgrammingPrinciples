"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[490],{1264:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/files/solution-5bd0bbe3fc5ea9d72dd02416bb194735.js"},2883:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Advanced-Objects-Inheritance/Practice-Exercise","title":"Practice Exercise","description":"Practice Exercise","source":"@site/docs/Advanced-Objects-Inheritance/Practice-Exercise.md","sourceDirName":"Advanced-Objects-Inheritance","slug":"/Advanced-Objects-Inheritance/Practice-Exercise","permalink":"/WebProgrammingPrinciples/Advanced-Objects-Inheritance/Practice-Exercise","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Advanced-Objects-Inheritance/Practice-Exercise.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"Practice-Exercise","title":"Practice Exercise","sidebar_position":3,"description":"Practice Exercise"},"sidebar":"courseNotesSidebar","previous":{"title":"Constructor Functions","permalink":"/WebProgrammingPrinciples/Advanced-Objects-Inheritance/Constructor-Functions"},"next":{"title":"Development Web Environment","permalink":"/WebProgrammingPrinciples/HTML-Fundamentals/Development-Web-Environment"}}');var t=n(4848),c=n(8453);const d={id:"Practice-Exercise",title:"Practice Exercise",sidebar_position:3,description:"Practice Exercise"},i="Practice Exercise",o={},l=[{value:"Morse Code translator",id:"morse-code-translator",level:2}];function a(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"practice-exercise",children:"Practice Exercise"})}),"\n",(0,t.jsx)(s.h2,{id:"morse-code-translator",children:"Morse Code translator"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Morse_code",children:"Morse code"})," is a system of encoding developed\nin the 1800s that allowed transmission of textual messages over signal systems that only\nsupported on/off (1 and 0) notations."]}),"\n",(0,t.jsxs)(s.p,{children:["Complete the program below as specified. Your program should be able to translate messages like\n",(0,t.jsx)(s.code,{children:"-- --- .-. ... ./-.-. --- -.. ."})," into ",(0,t.jsx)(s.code,{children:"MORSE CODE"})," and vice versa. Use what you learned\nabove about ",(0,t.jsx)(s.code,{children:"Object"}),"s, and also some of the built-in ",(0,t.jsx)(s.code,{children:"Object"}),"s we've studied, in particular\n",(0,t.jsx)(s.code,{children:"RegExp"})," and ",(0,t.jsx)(s.code,{children:"String"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Use the following ",(0,t.jsx)(s.a,{href:"https://morsecode.scphillips.com/morse2.html",children:"limited set of morse code"})," to use in this exercise. You could expand your program to handle more complex messages later if you want:"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Letter"}),(0,t.jsx)(s.th,{children:"Morse"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"A"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:".-"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"B"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"-..."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"C"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"-.-."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"D"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"-.."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"E"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"F"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"..-."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"G"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"--."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"H"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"...."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"I"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:".."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"J"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:".---"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"K"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"-.-"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"L"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:".-.."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"M"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"--"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"N"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"-."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"O"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"---"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"P"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:".--."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Q"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"--.-"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"R"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:".-."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"S"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"..."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"T"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"-"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"U"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"..-"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"V"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"...-"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"W"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:".--"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"X"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"-..-"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Y"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"-.--"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Z"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"--.."})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.em,{children:"space"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"/"})})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["NOTE: letters are separated by a single space (",(0,t.jsx)(s.code,{children:"' '"}),") within a word, and words are separated with a ",(0,t.jsx)(s.code,{children:"/"}),".\nFor example, the words ",(0,t.jsx)(s.code,{children:"MORSE CODE"})," would translate to ",(0,t.jsx)(s.code,{children:"-- --- .-. ... ./-.-. --- -.. ."})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"// Object to provide lookup of morse code (value) for a given letter (key).\nlet alpha = {\n  // define the mapping here as a literal\n};\n\n// Object to provide lookup of letter (value) for a given morse code (key).\nlet morse = {};\n// Hint: use the [] operator to specify these special key values rather than a literal.\n\n// Return `true` if all characters are morse code.  Use a RegExp.\nfunction isMorse(characters) {}\n\n// Return `true` if all characters are part of the alphabet defined in `alpha`.  Use a RegExp.\n// Bonus: can you rewrite it using `Object.keys()` and your `alpha` Object instead?\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\nfunction isAlpha(characters) {}\n\n// Given an alphabet message, convert and return in morse code.  Use your morse and/or alpha object.\n// Return undefined if text is not alpha.\nfunction textToMorse(text) {}\n\n// Given a morse code message, convert and return in text.  Use your morse and/or alpha object.\n// Return undefined if morse is not proper code.\nfunction morseToText(morse) {}\n\n// Message class that takes a `message` (String), which can be either morse or alpha.\n// Use your functions above to decide how to store a value for `any` on `this`\nclass Message {\n  constructor(text) {}\n\n  // Return the message as morse code, converting if necessary\n  toMorse() {}\n\n  // Return the message as alpha characters, converting if necessary\n  toAlpha() {}\n}\n\nlet msg1 = new Message(\n  '--- -... .--- . -.-. - .../.. -./.--- .- ...- .- ... -.-. .-. .. .--. -/.- .-. ./...- . .-. -.--/.--. --- .-- . .-. ..-. ..- .-..'\n);\nconsole.log(msg1.toAlpha());\nconsole.log(msg1.toMorse());\n\nlet msg2 = new Message('I am learning how to use Objects in JavaScript');\nconsole.log(msg2.toMorse());\nconsole.log(msg2.toAlpha());\n"})}),"\n",(0,t.jsxs)(s.p,{children:["You can download the ",(0,t.jsx)(s.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(3805).A+"",children:"code above"})," as well as a ",(0,t.jsx)(s.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(1264).A+"",children:"possible solution"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},3805:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/files/example-48d9eea2c3c48c0166d95ccdf8a90e71.js"},8453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>i});var r=n(6540);const t={},c=r.createContext(t);function d(e){const s=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(c.Provider,{value:s},e.children)}}}]);