"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[1791],{4203:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"CSS-Styling/Introduction-CSS-Syntax","title":"Introduction to CSS & Syntax","description":"Introduction to CSS & Syntax","source":"@site/docs/CSS-Styling/Introduction-CSS-Syntax.md","sourceDirName":"CSS-Styling","slug":"/CSS-Styling/Introduction-CSS-Syntax","permalink":"/WebProgrammingPrinciples/CSS-Styling/Introduction-CSS-Syntax","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/CSS-Styling/Introduction-CSS-Syntax.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"Introduction-CSS-Syntax","title":"Introduction to CSS & Syntax","sidebar_position":1,"description":"Introduction to CSS & Syntax"},"sidebar":"courseNotesSidebar","previous":{"title":"Practice Exercise","permalink":"/WebProgrammingPrinciples/DOM-Events/Practice-Exercise"},"next":{"title":"Applied CSS","permalink":"/WebProgrammingPrinciples/CSS-Styling/Applied-CSS"}}');var l=s(4848),i=s(8453);const o={id:"Introduction-CSS-Syntax",title:"Introduction to CSS & Syntax",sidebar_position:1,description:"Introduction to CSS & Syntax"},r="Introduction to CSS & Syntax",a={},c=[{value:"CSS Syntax",id:"css-syntax",level:2},{value:"Where to Put CSS",id:"where-to-put-css",level:2},{value:"Inline Example",id:"inline-example",level:3},{value:"Internal Embedded",id:"internal-embedded",level:3},{value:"External File(s)",id:"external-files",level:3},{value:"CSS Selectors",id:"css-selectors",level:2},{value:"Tag/Type Selectors",id:"tagtype-selectors",level:3},{value:"Class Selectors",id:"class-selectors",level:3},{value:"ID Selectors",id:"id-selectors",level:3},{value:"Contextual Selectors",id:"contextual-selectors",level:3},{value:"Grouping Selectors",id:"grouping-selectors",level:3},{value:"Suggested Readings",id:"suggested-readings",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"introduction-to-css--syntax",children:"Introduction to CSS & Syntax"})}),"\n",(0,l.jsxs)(n.p,{children:["In HTML5 we don't include markup related to how our page should look; instead we focus on\nits structure, layout, and organization. We put all this information in style sheets: text\nfiles that define CSS ",(0,l.jsx)(n.em,{children:"selectors"})," and ",(0,l.jsx)(n.em,{children:"rules"})," for how to style our HTML elements."]}),"\n",(0,l.jsx)(n.p,{children:'CSS allows us to specify styles, layout, positioning, and other "style" properties for HTML elements.\nCSS makes it possible for a page\'s style information to be separated from its structure and content.\nConsider how much of an impact CSS can have on the same HTML:'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"http://www.csszengarden.com/",children:"CSS Zen Garden"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://csszengarden.com/examples/index",children:"CSS Zen Garden HTML file"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://csszengarden.com/examples/style.css",children:"CSS Zen Garden CSS file"})}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"css-syntax",children:"CSS Syntax"}),"\n",(0,l.jsxs)(n.p,{children:["CSS syntax is made up of ",(0,l.jsx)(n.em,{children:"rules"}),", which are broken into two parts:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["a ",(0,l.jsx)(n.em,{children:"selector"}),", specifying the element(s) that should have the rules applied"]}),"\n",(0,l.jsxs)(n.li,{children:["one or more ",(0,l.jsx)(n.em,{children:"declarations"}),", which are ",(0,l.jsx)(n.em,{children:"key/value"})," pairs surrounded by ",(0,l.jsx)(n.code,{children:"{...}"})," braces"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-css",children:"h1 {\n  color: blue;\n  font-size: 12px;\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["In this example, the ",(0,l.jsx)(n.em,{children:"selector"})," is ",(0,l.jsx)(n.code,{children:"h1"}),", which indicates that we want the following\nrules to be applied to level-1 heading elements (i.e., all ",(0,l.jsx)(n.code,{children:"<h1></h1>"})," elements in the document).\nNext comes a list of two definitions, each ending with a ",(0,l.jsx)(n.code,{children:";"}),". These declarations\nfollow the usual key/value syntax, with a ",(0,l.jsx)(n.em,{children:"property"})," name coming before the ",(0,l.jsx)(n.code,{children:":"}),", and a ",(0,l.jsx)(n.em,{children:"value"}),"\ncoming after:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"color: blue;"})," says we want to use the colour (note the spelling) blue"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"font-size: 12px;"})," says we want the font to be 12px."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Here's another example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-css",children:"p {\n  color: red;\n  text-align: center;\n  text-decoration: underline;\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This indicates we want all ",(0,l.jsx)(n.code,{children:"<p></p>"})," elements in the document to have red, centered, underlined text."]}),"\n",(0,l.jsx)(n.h2,{id:"where-to-put-css",children:"Where to Put CSS"}),"\n",(0,l.jsx)(n.p,{children:"CSS can come from a number of sources in an HTML page:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Inline"}),"\n",(0,l.jsx)(n.li,{children:"Internal Embedded"}),"\n",(0,l.jsx)(n.li,{children:"External File(s)"}),"\n",(0,l.jsxs)(n.li,{children:["The browser itself (e.g., ",(0,l.jsx)(n.a,{href:"https://github.com/mozilla/gecko-dev/blob/master/layout/style/res/html.css",children:"default styles"}),", or extra styles injected by a browser extension)"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Browsers apply styles to elements using a priority order that matches the list above.\nIf more than one style rule is specified for an element, the browser will prefer whatever\nis defined in Inline styles over Internal Embedded, Internal Embedded over External files, etc."}),"\n",(0,l.jsx)(n.h3,{id:"inline-example",children:"Inline Example"}),"\n",(0,l.jsxs)(n.p,{children:["CSS rules can be placed directly on an element via the ",(0,l.jsx)(n.code,{children:"style"})," attribute:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<div style="background-color: green">...</div>\n'})}),"\n",(0,l.jsx)(n.h3,{id:"internal-embedded",children:"Internal Embedded"}),"\n",(0,l.jsxs)(n.p,{children:["If we want to apply the same CSS rules to more than one element, it makes more sense to\n",(0,l.jsx)(n.em,{children:"not"})," duplicate them on every element's ",(0,l.jsx)(n.code,{children:"style"})," attribute. One solution is to use an internal embedded\n",(0,l.jsx)(n.code,{children:"<style>"})," element in the ",(0,l.jsx)(n.code,{children:"<head>"})," or ",(0,l.jsx)(n.code,{children:"<body>"}),", similar to how embedded ",(0,l.jsx)(n.code,{children:"<script>"})," elements work:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"<style>\n  p {\n    color: red;\n  }\n\n  div {\n    background-color: blue;\n    text-align: center;\n  }\n</style>\n"})}),"\n",(0,l.jsx)(n.h3,{id:"external-files",children:"External File(s)"}),"\n",(0,l.jsxs)(n.p,{children:["Putting large amounts of CSS in ",(0,l.jsx)(n.code,{children:"<style>"})," elements makes our HTML harder to read and maintain\n(CSS is about separating style from structure), and also causes our page to perform worse\nin terms of load times (i.e., the styles can't be cached by the browser). To overcome this,\nwe often include external ",(0,l.jsx)(n.code,{children:".css"})," files via the ",(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link",children:(0,l.jsx)(n.code,{children:"<link>"})}),"\nelement within the document's ",(0,l.jsx)(n.code,{children:"<head>"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<!doctype html>\n<html>\n  <head>\n    <link rel="stylesheet" href="styles.css" type="text/css" />\n  </head>\n</html>\n'})}),"\n",(0,l.jsxs)(n.p,{children:["We can include many stylesheets in this way (i.e., everything doesn't have to go in one file),\nand we can include ",(0,l.jsx)(n.code,{children:".css"})," files on the same origin, or a remote origin:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<!doctype html>\n<html>\n  <head>\n    <link\n      rel="stylesheet"\n      href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"\n    />\n    <link rel="stylesheet" href="styles.css" type="text/css" />\n  </head>\n</html>\n'})}),"\n",(0,l.jsxs)(n.p,{children:["In the example above, the page uses the popular ",(0,l.jsx)(n.a,{href:"https://getbootstrap.com/",children:"Bootstrap"})," CSS styles\nalong with some locally (i.e., local to the web server) styles in ",(0,l.jsx)(n.code,{children:"styles.css"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.code,{children:".css"})," file included in this way can also ",(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@import",children:(0,l.jsx)(n.code,{children:"@import"})}),"\nto have even more ",(0,l.jsx)(n.code,{children:".css"})," files get loaded at runtime:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-css",children:"/* Import Font Awesome */\n@import url(https://use.fontawesome.com/releases/v5.4.2/css/all.css);\n"})}),"\n",(0,l.jsxs)(n.p,{children:["In this example, the popular ",(0,l.jsx)(n.a,{href:"https://fontawesome.com/",children:"Font Awesome"})," CSS library for font icons\nhas been imported via a ",(0,l.jsx)(n.code,{children:".css"})," file."]}),"\n",(0,l.jsx)(n.h2,{id:"css-selectors",children:"CSS Selectors"}),"\n",(0,l.jsxs)(n.p,{children:["We've already learned a few CSS Selectors when we discussed ",(0,l.jsx)(n.code,{children:"querySelector()"})," and\n",(0,l.jsx)(n.code,{children:"querySelectorAll()"}),". The word ",(0,l.jsx)(n.code,{children:"Selector"})," refers to the fact that these methods take\na CSS Selector and return DOM elements that match. For example:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"document.querySelector('#output')"})," would return the element with attribute ",(0,l.jsx)(n.code,{children:'id="output"'})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"document.querySelectorAll('.logo')"})," would return all elements with a class of ",(0,l.jsx)(n.code,{children:"logo"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"document.querySelectorAll('img')"})," would return all ",(0,l.jsx)(n.code,{children:"<img>"})," elements"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"These same selectors, and many more, can also be used in our CSS rulesets."}),"\n",(0,l.jsx)(n.h3,{id:"tagtype-selectors",children:"Tag/Type Selectors"}),"\n",(0,l.jsxs)(n.p,{children:["The name of an HTML element can be used to specify the styles associated with all\nelements of the given type. For example, to ",(0,l.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent",children:["indent all ",(0,l.jsx)(n.code,{children:"<p>"})," text"]})," in our document, we could do this:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-css",children:"p {\n  text-indent: 20px;\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"class-selectors",children:"Class Selectors"}),"\n",(0,l.jsxs)(n.p,{children:["Often we want to apply styles to ",(0,l.jsx)(n.em,{children:"some"})," but not ",(0,l.jsx)(n.em,{children:"all"})," elements of a certain kind. Perhaps\nwe only want some of our page's ",(0,l.jsx)(n.code,{children:"<p>"})," elements to have a particular look. To achieve this,\nwe define a ",(0,l.jsx)(n.em,{children:"class"}),", and then put that class on the elements that require it:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<style>\n  .demo {\n    text-decoration: underline red;\n  }\n</style>\n\n<p>This is a paragraph that won\'t get the styles below applied to it (doesn\'t include the class)</p>\n<p class="demo">This paragraph will get the styling applied.</p>\n<p class="demo">And so will this one.</p>\n'})}),"\n",(0,l.jsx)(n.p,{children:"A class can be applied to elements that aren't of the same type:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<style>\n    .invisible {\n        display: none;\n    }\n</style>\n\n<h1 class="invisible">Title</p>\n<p class="invisible">This is a paragraph.</p>\n'})}),"\n",(0,l.jsxs)(n.p,{children:["I this example, both the ",(0,l.jsx)(n.code,{children:"<h1>"})," element, and the ",(0,l.jsx)(n.code,{children:"<p>"})," element will have the ",(0,l.jsx)(n.code,{children:"display: none"})," style applied,\nhiding them so they don't appear in the page."]}),"\n",(0,l.jsx)(n.p,{children:"If we want to be more specific, and only apply styles to elements of a given type which also have\na given class, we can do this:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<style>\n  p.note {\n    font-weight: bold;\n  }\n</style>\n\n<p class="note">This is a paragraph that also uses the note class.</p>\n<div class="note">\n  This div uses the note class too, but because we said p.note, no styles are used.\n</div>\n'})}),"\n",(0,l.jsx)(n.p,{children:"An element can also have multiple classes applied, each one adding different styling:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<style>\n  .invisible {\n    display: none;\n  }\n\n  .example {\n    color: green;\n    background-color: red;\n  }\n</style>\n\n<p class="invisible example">This is a paragraph that uses two classes at once.</p>\n'})}),"\n",(0,l.jsx)(n.h3,{id:"id-selectors",children:"ID Selectors"}),"\n",(0,l.jsxs)(n.p,{children:["In many cases, we have only a single element that should use styles. Using a type\nor class selector would be overly broad, and so we tend to use an ",(0,l.jsx)(n.code,{children:"id"})," instead.\nRecall that only one HTML element in a document can have a given ",(0,l.jsx)(n.code,{children:"id"})," attribute:\nit must be unique."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<style>\n  #summary {\n    background-color: skyblue;\n  }\n</style>\n\n<div id="summary"></div>\n'})}),"\n",(0,l.jsxs)(n.p,{children:["When we use the ",(0,l.jsx)(n.code,{children:"id"})," as a selector, we prefix it with the ",(0,l.jsx)(n.code,{children:"#"})," symbol. Notice that\nthe HTML does ",(0,l.jsx)(n.em,{children:"not"})," use the ",(0,l.jsx)(n.code,{children:"#"})," symbol though."]}),"\n",(0,l.jsx)(n.h3,{id:"contextual-selectors",children:"Contextual Selectors"}),"\n",(0,l.jsxs)(n.p,{children:["Another common way to write selectors is to use the position of elements in the DOM.\nThe ",(0,l.jsx)(n.em,{children:"context selector"})," indicates the context, or placement/nesting (i.e., determined by the\nparent node) of the element."]}),"\n",(0,l.jsxs)(n.p,{children:["For example, if we want to apply styles to ",(0,l.jsx)(n.code,{children:"<p>"})," elements that are children of ",(0,l.jsx)(n.code,{children:"<div>"}),"\nelements, we could do this:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"<style>\n  div p {\n    font-size: 16px;\n  }\n</style>\n\n<p>This paragraph will not receive the styling</p>\n\n<div>\n  <p>This paragraph will receive the styling.</p>\n  <p>This paragraph will receive the styling also.</p>\n</div>\n"})}),"\n",(0,l.jsx)(n.h3,{id:"grouping-selectors",children:"Grouping Selectors"}),"\n",(0,l.jsx)(n.p,{children:"As our CSS grows, it's common that we'll notice that we're repeating the same things\nmultiple times. Instead of doing this, we can group a number of selectors together into\na comma-separated list:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-css",children:"html,\nbody {\n  height: 100%;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: Serif;\n  color: blue;\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Here we've used grouping twice to cut-down on the number of times we have to repeat things.\nIn the first case, we defined a height of ",(0,l.jsx)(n.code,{children:"100%"})," (full height of the window) for the ",(0,l.jsx)(n.code,{children:"<html>"}),"\nand ",(0,l.jsx)(n.code,{children:"<body>"})," elements (they don't have a height by default, and will only be as tall as\nthe content within them). We've also declared some font and color information for all the\nheadings we want to use."]}),"\n",(0,l.jsx)(n.h2,{id:"suggested-readings",children:"Suggested Readings"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS",children:"Introduction to CSS"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS",children:"Learning to Style HTML using CSS"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS",children:"CSS: Cascading Style Sheets on MDN"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var t=s(6540);const l={},i=t.createContext(l);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);