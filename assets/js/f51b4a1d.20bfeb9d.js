"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[8983],{2920:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"JSON-Dynamic-Data/Advanced Techniques","title":"Advanced Techniques","description":"Advanced Techniques","source":"@site/docs/JSON-Dynamic-Data/Advanced-Techniques.md","sourceDirName":"JSON-Dynamic-Data","slug":"/JSON-Dynamic-Data/Advanced Techniques","permalink":"/WebProgrammingPrinciples/JSON-Dynamic-Data/Advanced Techniques","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/JSON-Dynamic-Data/Advanced-Techniques.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"Advanced Techniques","title":"Advanced Techniques","sidebar_position":3,"description":"Advanced Techniques"},"sidebar":"courseNotesSidebar","previous":{"title":"Data Formats","permalink":"/WebProgrammingPrinciples/JSON-Dynamic-Data/Data-Formats"},"next":{"title":"Using REST APIs to Integrate Data in Web Apps","permalink":"/WebProgrammingPrinciples/Case-Study/Using-REST-APIs-Integrate-Data-Web-Apps"}}');var s=r(4848),o=r(8453);const a={id:"Advanced Techniques",title:"Advanced Techniques",sidebar_position:3,description:"Advanced Techniques"},i="Advanced Techniques",c={},d=[{value:"XHR and Cross-Origin Requests",id:"xhr-and-cross-origin-requests",level:2},{value:"Other Mechanisms for working with Data",id:"other-mechanisms-for-working-with-data",level:2},{value:"<code>fetch()</code> API",id:"fetch-api",level:3},{value:"Server Sent Events",id:"server-sent-events",level:3},{value:"Web Sockets",id:"web-sockets",level:3},{value:"Modern Front End Development",id:"modern-front-end-development",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"advanced-techniques",children:"Advanced Techniques"})}),"\n",(0,s.jsx)(n.h2,{id:"xhr-and-cross-origin-requests",children:"XHR and Cross-Origin Requests"}),"\n",(0,s.jsx)(n.p,{children:"It should be noted that we've been making requests to third-party web servers\nin the example above. This is something that won't always work for all servers,\nor all data types."}),"\n",(0,s.jsxs)(n.p,{children:["In the examples above, the servers were configured to allow ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",children:"Cross-Origin\nResource Sharing (CORS)"}),".\nBy default, browsers maintain a sandbox around resources (scripts, images, data)\nfrom one origin, and don't let it mix in unsafe ways with resources from other\norigins."]}),"\n",(0,s.jsxs)(n.p,{children:["In general, it's best to load data from the same origin as your page (i.e.,\nthe same web server). The so-called \"Same Origin\" policy states that you can't\nload data from other origins. However, using CORS headers, servers and browsers\ncan allow this in some cases. In the examples above, the servers added a header\n",(0,s.jsx)(n.code,{children:"Access-Control-Allow-Origin: *"})," to indicate that cross-origin requests were\nOK."]}),"\n",(0,s.jsx)(n.p,{children:"If ever you are trying to use XHR to request data from a serer, and it won't work,\nthe problem is almost certainly related to CORS."}),"\n",(0,s.jsx)(n.h2,{id:"other-mechanisms-for-working-with-data",children:"Other Mechanisms for working with Data"}),"\n",(0,s.jsx)(n.p,{children:"While XHR is a historically popular choice for accessing data from web services,\nin recent years a number of new APIs have also emerged that offer both similar\nand enhanced capabilities. Discussing these in any detail is beyond the scope\nof this course; however, it is important that you're aware of them, and look\nout for opportunities to learn and use them in future courses and projects."}),"\n",(0,s.jsxs)(n.h3,{id:"fetch-api",children:[(0,s.jsx)(n.code,{children:"fetch()"})," API"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",children:[(0,s.jsx)(n.code,{children:"fetch()"}),"API"]})," provides\nJavaScript developers a rich set of objects and functions for working with\nthe entire HTTP network infrastructure, including things like ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Request",children:"requests"}),", ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Response",children:"responses"}),",\nthe ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Cache",children:"cache"}),", etc.\nIt uses the modern ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:"Promise"})," API for handling callbacks."]}),"\n",(0,s.jsxs)(n.p,{children:["Here's what it would look like to use ",(0,s.jsx)(n.code,{children:"fetch"})," to request the current Bitcoin\nvalue from our first example above:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fetch('https://blockchain.info/q/24hrprice?cors=true')\n  .then(function (response) {\n    var currentValue = `${response.text()} (USD)`;\n    updateBitcoinValue(currentValue);\n  })\n  .catch(function (err) {\n    updateBitcoinValue('unknown (error, unable to get current value)');\n  });\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"fetch"})," offers much greater control over the network, and makes it easier to\nprocess data coming from the server."]}),"\n",(0,s.jsx)(n.h3,{id:"server-sent-events",children:"Server Sent Events"}),"\n",(0,s.jsxs)(n.p,{children:["With our Bitcoin example, we needed to constantly poll (i.e., re-request) the\nupdated value from the server. Another approach would be to wait for the server\nto send us an update (push). One way to accomplish this is with ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events",children:"Server Sent Events"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Server Sent Events allow web sites to open a long running connection with a server, and get updates from the server when there is new data. On the browser\nside, we use the ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/EventSource",children:(0,s.jsx)(n.code,{children:"EventSource"})})," ",(0,s.jsx)(n.code,{children:"Object"})," to process\nthese events, just as we would other types of events in a web page."]}),"\n",(0,s.jsx)(n.h3,{id:"web-sockets",children:"Web Sockets"}),"\n",(0,s.jsxs)(n.p,{children:["Server Sent Events are great for 1-way communciation from a server to a browser,\nbut sometimes we need to ",(0,s.jsx)(n.em,{children:"also"})," send data back to the server at regular intervals.\nConsider a chat application, where we need to both receive and send messages."]}),"\n",(0,s.jsxs)(n.p,{children:["In such systems, we need a bi-directional, long-running connection to the server.\nThe browser provides this in the form of a ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API",children:(0,s.jsx)(n.code,{children:"WebSocket"})}),". Web Sockets\ncan be connected to different backends written in any language. Within the browser, we receive events when data arrives, and send data when we need to over\nthe socket."]}),"\n",(0,s.jsx)(n.h2,{id:"modern-front-end-development",children:"Modern Front End Development"}),"\n",(0,s.jsx)(n.p,{children:"The concepts we've been discussing above have come to define the modern\napproach to web development. Browsers have gotten faster and more powerful,\nand the APIs and tools for building web services more full-featured."}),"\n",(0,s.jsx)(n.p,{children:"As a result, new approaches to front-end development have taken over.\nIn your follow-up courses you'll learn more about popular front-end frameworks,\nwhich build on the low-level ideas we've been using here (HTML, CSS, JS, DOM, JSON), for example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://reactjs.org/",children:"React"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://angular.io/",children:"Angular"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://vuejs.org/",children:"Vue"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.emberjs.com/",children:"Ember"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"These frameworks take a data-driven approach to developing on the web, separating\nan applications data and state from its presentation. The ideas begun with AJAX\nare taken to another level, and single-page HTML applications are used to create\nrich interfaces."}),"\n",(0,s.jsx)(n.p,{children:"Understanding the foundation for how all of this works, from HTML, CSS, and JS to JSON and XHR, will be an important part of taking the next step."})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(6540);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);