"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[289],{651:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Objects-Built-ins/Arrays","title":"Arrays","description":"Arrays","source":"@site/docs/Objects-Built-ins/Arrays.md","sourceDirName":"Objects-Built-ins","slug":"/Objects-Built-ins/Arrays","permalink":"/WebProgrammingPrinciples/Objects-Built-ins/Arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Objects-Built-ins/Arrays.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"Arrays","title":"Arrays","sidebar_position":3,"description":"Arrays"},"sidebar":"courseNotesSidebar","previous":{"title":"Strings","permalink":"/WebProgrammingPrinciples/Objects-Built-ins/Strings"},"next":{"title":"RegExp","permalink":"/WebProgrammingPrinciples/Objects-Built-ins/RegExp"}}');var t=n(4848),s=n(8453);const i={id:"Arrays",title:"Arrays",sidebar_position:3,description:"Arrays"},o="Arrays",l={},c=[{value:"Declaring JavaScript Arrays",id:"declaring-javascript-arrays",level:2},{value:"Accessing Elements in an Array",id:"accessing-elements-in-an-array",level:2},{value:"<code>Array</code> Properties and Methods",id:"array-properties-and-methods",level:2},{value:"Methods that modify the original array",id:"methods-that-modify-the-original-array",level:3},{value:"Methods that do not modify the original array",id:"methods-that-do-not-modify-the-original-array",level:3},{value:"Methods for iterating across the elements in an Array",id:"methods-for-iterating-across-the-elements-in-an-array",level:3},{value:"Iterating over String, Array, and other collections",id:"iterating-over-string-array-and-other-collections",level:2}];function d(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"arrays",children:"Arrays"})}),"\n",(0,t.jsxs)(r.p,{children:["An ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",children:(0,t.jsx)(r.code,{children:"Array"})})," is an ",(0,t.jsx)(r.code,{children:"Object"})," with various ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Array_instances",children:"properties and methods"})," we can use for working with lists in JavaScript."]}),"\n",(0,t.jsx)(r.h2,{id:"declaring-javascript-arrays",children:"Declaring JavaScript Arrays"}),"\n",(0,t.jsxs)(r.p,{children:["Like creating a ",(0,t.jsx)(r.code,{children:"String"}),", we can create an ",(0,t.jsx)(r.code,{children:"Array"})," in JavaScript using either a literal or the ",(0,t.jsx)(r.code,{children:"Array"})," constructor function:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let arr = new Array(1, 2, 3); // array constructor\nlet arr2 = [1, 2, 3]; // array literal\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Like arrays in C, a JavaScript ",(0,t.jsx)(r.code,{children:"Array"})," has a length, and items contained within it can be\naccessed via an index:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let arr = [1, 2, 3];\nlet len = arr.length; // len is 3\nlet item0 = arr[0]; // item0 is 1\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Unlike languages such as C, a JavaScript ",(0,t.jsx)(r.code,{children:"Array"})," can contain any type of data, including mixed types:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let list = [0, '1', 'two', true];\n"})}),"\n",(0,t.jsxs)(r.p,{children:["JavaScript ",(0,t.jsx)(r.code,{children:"Array"}),"s can also contain holes (i.e., be missing certain elements), change size dynamically at runtime, and we don't need to specify an initial size:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let arr = []; // empty array\narr[5] = 56; // element 5 now contains 56, and arr's length is now 6\n"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["NOTE: a JavaScript ",(0,t.jsx)(r.code,{children:"Array"})," is really a ",(0,t.jsx)(r.strong,{children:"map"}),", which is a data structure that associates values with unique keys (often called a key-value pair). JavaScript arrays are a special kind of map that uses numbers for the keys, which makes them look and behave very much like arrays in other languages. We will encounter this ",(0,t.jsx)(r.strong,{children:"map"})," structure again when we look at how to create ",(0,t.jsx)(r.code,{children:"Object"}),"s."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"accessing-elements-in-an-array",children:"Accessing Elements in an Array"}),"\n",(0,t.jsx)(r.p,{children:"Like arrays in C, we can use index notation to obtain an element at a given index:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let numbers = [50, 12, 135];\nlet firstNumber = numbers[0];\nlet lastNumber = numbers[numbers.length - 1];\n"})}),"\n",(0,t.jsxs)(r.p,{children:["JavaScript also allows us to use a technique called ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",children:"Destructuring Assignment"})," to unpack values in an Array (or Object, see below) into distinct variables. Consider each of the following methods, both of which accomplish the same goal:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"// Co-ordinates for Seneca's Newnham Campus\nlet position = [43.796, -79.3486];\n\n// Separate the two values into their own unique variables.\n\n// Version 1 - index notation\nlet lat = position[0];\nlet lng = position[1];\n\n// Version 2 - destructure\nlet [lat, lng] = position;\n"})}),"\n",(0,t.jsx)(r.p,{children:"This technique is useful when working with structured data, where you know exactly how many elements are in an array, and need to access them:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let dateString = `17/02/2001`;\nlet [day, month, year] = dateString.split('/');\nconsole.log(`The day is ${day}, month is ${month}, and year is ${year}`);\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Here we ",(0,t.jsx)(r.code,{children:".split()"})," the string ",(0,t.jsx)(r.code,{children:"'17/02/2001'"})," at the ",(0,t.jsx)(r.code,{children:"'/'"})," character, which will produce the Array ",(0,t.jsx)(r.code,{children:"['17', '02', '2001']"}),". Next, we destructure this Array's values into the variables ",(0,t.jsx)(r.code,{children:"day"}),", ",(0,t.jsx)(r.code,{children:"month"}),", ",(0,t.jsx)(r.code,{children:"year"}),"."]}),"\n",(0,t.jsx)(r.p,{children:"You can also ignore values (i.e., only unpack the one or ones you want):"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let dateString = `17/02/2001`;\n// Ignore the first index in the array, unpack only position 1 and 2\nlet [, month, year] = dateString.split('/');\nconsole.log(`The month is ${month}, and year is ${year}`);\n\nlet emailAddress = `jsmith@myseneca.ca`;\n// Only unpack the first position, ignoring the second\nlet [username] = emailAddress.split('@');\nconsole.log(`The username for ${emailAddress} is ${username}`);\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"array-properties-and-methods",children:[(0,t.jsx)(r.code,{children:"Array"})," Properties and Methods"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length",children:(0,t.jsx)(r.code,{children:"arr.length"})})," - a property that tells us the number of elements in the array."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"methods-that-modify-the-original-array",children:"Methods that modify the original array"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push",children:(0,t.jsx)(r.code,{children:"arr.push(element)"})})," - a method to add one (or more) element(s) to the end of the array. Using ",(0,t.jsx)(r.code,{children:"push()"})," modifies the array (increasing its size). You can also use ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift",children:(0,t.jsx)(r.code,{children:"arr.unshift(element)"})})," to add one (or more) element to the ",(0,t.jsx)(r.em,{children:"start"})," of the array."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",children:(0,t.jsx)(r.code,{children:"arr.pop()"})})," - a method to remove the last element in the array and return it. Using ",(0,t.jsx)(r.code,{children:"pop()"})," modifies the array (reducing its size). You can also use ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",children:(0,t.jsx)(r.code,{children:"arr.shift()"})})," to remove the ",(0,t.jsx)(r.em,{children:"first"})," element in the array and return it."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"methods-that-do-not-modify-the-original-array",children:"Methods that do not modify the original array"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",children:(0,t.jsx)(r.code,{children:"arr.concat([4, 5], 6)"})})," - returns a new array with the original array joined together with other arrays or values provided."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",children:(0,t.jsx)(r.code,{children:"arr.includes(element)"})})," - returns ",(0,t.jsx)(r.code,{children:"true"})," if the array includes the given element, otherwise ",(0,t.jsx)(r.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",children:(0,t.jsx)(r.code,{children:"arr.indexOf(element)"})})," - returns the index of the given element in the array, if it exists, otherwise ",(0,t.jsx)(r.code,{children:"-1"})," (meaning not found)."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join",children:(0,t.jsx)(r.code,{children:'arr.join("\\n")'})})," - returns a string created by joining (concatenating) all elements in the array with the given delimiter (",(0,t.jsx)(r.code,{children:"String"}),")."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"methods-for-iterating-across-the-elements-in-an-array",children:"Methods for iterating across the elements in an Array"}),"\n",(0,t.jsxs)(r.p,{children:["JavaScript's ",(0,t.jsx)(r.code,{children:"Array"})," type also provides a ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#",children:"long list"})," of useful methods for working with list data. All of\nthese methods work in roughly the same way:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"// Define an Array\nlet list = [1, 2, 3, 4];\n\n// Define a function that you want to call on each element of the array\nfunction operation(element) {\n  // do something with element...\n}\n\n// Call the Array method that you want, passing your function operation\nlist.arrayOperation(operation);\n"})}),"\n",(0,t.jsx)(r.p,{children:"JavaScript will call the given function on every element in the array, one after\nthe other. Using these methods, we are able to work with the elements in an Array\ninstead of only being able to do things with the Array itself."}),"\n",(0,t.jsxs)(r.p,{children:["As a simple example, let's copy our ",(0,t.jsx)(r.code,{children:"list"})," Array and add 3 to every element.\nWe'll do it once with a for-loop, and the second time with the ",(0,t.jsx)(r.code,{children:"forEach()"})," method:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"// Create a new Array that adds 3 to every item in list, using a for-loop\nlet listCopy = [];\n\nfor (let i = 0; i < list.length; i++) {\n  let element = list[i];\n  element += 3;\n  listCopy.push(element);\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Now the same code using the ",(0,t.jsx)(r.code,{children:"Array"}),"'s ",(0,t.jsx)(r.code,{children:"forEach()"})," method:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let listCopy = [];\n\nlist.forEach(function (element) {\n  listCopy.push(element + 3);\n});\n"})}),"\n",(0,t.jsxs)(r.p,{children:["We've been able to get rid of all the indexing code, and with it, the chance\nfor ",(0,t.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Off-by-one_error",children:"off-by-one errors"}),". We\nalso don't have to write code to get the element out of the list: we just use\nthe variable passed to our function."]}),"\n",(0,t.jsxs)(r.p,{children:["These ",(0,t.jsx)(r.code,{children:"Array"})," methods are so powerful that there are often functions that do\nexactly what we need. For example, we could shorten our code above even further\nbut using the ",(0,t.jsx)(r.code,{children:"map()"})," method. The ",(0,t.jsx)(r.code,{children:"map()"})," method takes one ",(0,t.jsx)(r.code,{children:"Array"}),", and calls\na function on every element, creating and returning a new ",(0,t.jsx)(r.code,{children:"Array"})," with those\nelements:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let listCopy = list.map(function (element) {\n  return element + 3;\n});\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Here are some of the ",(0,t.jsx)(r.code,{children:"Array"})," methods you should work on learning:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",children:(0,t.jsx)(r.code,{children:"arr.forEach()"})})," - calls the provided function on each element in the array."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",children:(0,t.jsx)(r.code,{children:"arr.map()"})})," - creates and returns a new array constructed by calling the provided function on each element of the original array."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find",children:(0,t.jsx)(r.code,{children:"arr.find()"})})," - finds and returns an element from the array which matches a condition you define. See also ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast",children:(0,t.jsx)(r.code,{children:"arr.findLast()"})}),", ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",children:(0,t.jsx)(r.code,{children:"arr.findIndex()"})}),", and ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex",children:(0,t.jsx)(r.code,{children:"arr.findLastIndex()"})}),", which all work in similar ways."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",children:(0,t.jsx)(r.code,{children:"arr.filter()"})})," - creates and returns a new array containing only those elements that match a condition you define in your function."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every",children:(0,t.jsx)(r.code,{children:"arr.every()"})})," - returns ",(0,t.jsx)(r.code,{children:"true"})," if all of the elements in the array meet a condition you define in your function."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["There are more ",(0,t.jsxs)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Array_instances",children:[(0,t.jsx)(r.code,{children:"Array"})," methods"]})," you can learn as you progress with JavaScript, but these will get you started."]}),"\n",(0,t.jsx)(r.h2,{id:"iterating-over-string-array-and-other-collections",children:"Iterating over String, Array, and other collections"}),"\n",(0,t.jsxs)(r.p,{children:["The most familiar way to iterate over a ",(0,t.jsx)(r.code,{children:"String"})," or ",(0,t.jsx)(r.code,{children:"Array"})," works as you'd expect:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let s = 'Hello World!';\nfor (let i = 0; i < s.length; i++) {\n  let char = s.charAt(i);\n  console.log(i, char);\n  // Prints:\n  // 0, H\n  // 1, e\n  // 2, l\n  // ...\n}\n\nlet arr = [10, 20, 30, 40];\nfor (let i = 0; i < arr.length; i++) {\n  let elem = arr[i];\n  console.log(i, elem);\n  // Prints:\n  // 0, 10\n  // 1, 20\n  // 2, 30\n  // ...\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The standard ",(0,t.jsx)(r.code,{children:"for"})," loop works, but is not the best we can do. Using a ",(0,t.jsx)(r.code,{children:"for"})," loop\nis prone to various types of errors: off-by-one errors, for example. It also\nrequires extra code to convert an index counter into an element."]}),"\n",(0,t.jsxs)(r.p,{children:["An alternative approach is available in ES6, ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of",children:(0,t.jsx)(r.code,{children:"for...of"})}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"let s = 'Hello World!';\nfor (let char of s) {\n  console.log(char);\n  // Prints:\n  // H\n  // e\n  // l\n  // ...\n}\n\nlet arr = [10, 20, 30, 40];\nfor (let elem of arr) {\n  console.log(elem);\n  // Prints:\n  // 10\n  // 20\n  // 30\n  // ...\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Using ",(0,t.jsx)(r.code,{children:"for...of"})," we eliminate the need for a loop counter altogether, which has\nthe added benefit that we'll never under- or over- shoot our collection's element\nlist; we'll always loop across exactly the right number of elements within the\ngiven collection."]}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"for...of"})," loop works with all collection types, from ",(0,t.jsx)(r.code,{children:"String"})," to ",(0,t.jsx)(r.code,{children:"Array"})," to\n",(0,t.jsx)(r.code,{children:"arguments"})," to ",(0,t.jsx)(r.code,{children:"NodeList"})," (as well as newer collection types like\n",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",children:(0,t.jsx)(r.code,{children:"Map"})}),",\n",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",children:(0,t.jsx)(r.code,{children:"Set"})}),", etc.)."]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var a=n(6540);const t={},s=a.createContext(t);function i(e){const r=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:r},e.children)}}}]);